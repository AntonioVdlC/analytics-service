// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  firstName            String?
  lastName             String?
  email                String         @unique
  sessions             MagicLink[]
  websites             Website[]
  orgs                 UserOrg[]
  createdSubscriptions Subscription[]
  createdOrgs          Org[]
  createdUserOrgs      UserOrg[]      @relation("creator")
  isBeta               Boolean        @default(false)
  isInWaitlist         Boolean        @default(false)
  waitlistToken        String?
  waitlistInviteSent   Boolean?
  waitlistInviteSentAt DateTime?
  isOnboarded          Boolean        @default(false)
  isActive             Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model UserOrg {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  orgId         String
  org           Org      @relation(fields: [orgId], references: [id])
  role          Role     @default(USER)
  isActive      Boolean  @default(true)
  createdById   String
  createdByUser User     @relation(name: "creator", fields: [createdById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, orgId])
}

model Org {
  id            String        @id @default(uuid())
  name          String
  users         UserOrg[]
  websites      Website[]
  subscription  Subscription?
  isActive      Boolean       @default(true)
  createdById   String
  createdByUser User          @relation(fields: [createdById], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
  OWNER
}

model Plan {
  id                  String         @id @default(uuid())
  name                String
  stripePriceId       String         @unique
  priceValueInUSD     Int
  includeEventsMax    Int
  includeUsersMax     Int
  includeWebsitesMax  Int
  includeCustomEvents Boolean
  subscriptions       Subscription[]
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Subscription {
  id                   String    @id @default(uuid())
  planId               String
  plan                 Plan      @relation(fields: [planId], references: [id])
  orgId                String    @unique
  org                  Org       @relation(fields: [orgId], references: [id])
  invoices             Invoice[]
  stripeCustomerId     String
  stripeSubscriptionId String
  createdById          String
  createdByUser        User      @relation(fields: [createdById], references: [id])
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Invoice {
  id             String       @id @default(uuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model MagicLink {
  id         String   @id @default(uuid())
  token      String   @unique
  validUntil DateTime
  isUsed     Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Website {
  id            String     @id @default(uuid())
  name          String? // TODO: remove the optionality of this field!
  url           String
  publicKey     String     @unique
  orgId         String
  org           Org        @relation(fields: [orgId], references: [id])
  periods       Period[]
  events        Event[]
  paths         Path[]
  browsers      Browser[]
  platforms     Platform[]
  createdById   String
  createdByUser User       @relation(fields: [createdById], references: [id])
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique(fields: [url, createdById], name: "website")
}

model Path {
  id        String   @id @default(uuid())
  value     String
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id])
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [value, websiteId], name: "path")
}

model Browser {
  id        String   @id @default(uuid())
  value     String
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id])
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [value, websiteId], name: "browser")
}

model Platform {
  id        String   @id @default(uuid())
  value     String
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id])
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [value, websiteId], name: "platform")
}

model Event {
  id         String    @id @default(uuid())
  type       EventType @default(PAGEVIEW)
  count      Int
  websiteId  String
  website    Website   @relation(fields: [websiteId], references: [id])
  periodId   String
  period     Period    @relation(fields: [periodId], references: [id])
  pathId     String
  path       Path      @relation(fields: [pathId], references: [id])
  browserId  String?
  browser    Browser?  @relation(fields: [browserId], references: [id])
  platformId String?
  platform   Platform? @relation(fields: [platformId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique(fields: [websiteId, periodId, pathId, browserId, platformId], name: "website_period_path")
}

model Period {
  id        String   @id @default(uuid())
  year      Int
  month     Int
  day       Int
  hour      Int
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id])
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [year, month, day, hour, websiteId], name: "period_website")
}

enum EventType {
  PAGEVIEW
}

model AdminToken {
  id         String   @id @default(uuid())
  value      String
  validUntil DateTime
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AdminSession {
  id         String   @id @default(uuid())
  token      String
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
